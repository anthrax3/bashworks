Who said "temporary (bash) scripts"? Not me.

0.4 beta 0 documentation
````````````````````````

Bash 4.x is required.

Installation
============

- run: git clone git://github.com/jpic/bash-framework.git
- add to .bashrc: MODULES_PATH="/path/to/your/clone"
- add to .bashrc: source /path/to/your/clone/modules.sh
- add to .bashrc: module

Usage
=====

Standards
---------

Each module declare functions and variables which name are prefixed with the module name and an underscore. For example, all variable and function names of the "volume" module are prefixed by "volume_".

Optionnaly, a module may have a function which name is the same as the module. For example the "mtest" module declare- a "mtest()" convenience function which takes a module name as parameter and run all tests in the given module.

Configuration module
--------------------

The configuration module declares functions to update, save and load variables. The functions that take a module name as argument are in conf/module.sh, which basically wraps around the actual functions in conf/functions.sh. Functions you want to use are most likely defined and documented in conf/module.sh.

Polite functions
----------------

Generic reuseable functions usually take a module name string argument. It should let the actual module to overload what is it about to process.

conf_save() is polite because for example `conf_save yourmodule` will call yourmodule_conf_save() and return directly afterward; if yourmodule_conf_save() exists which is of course optionnal.

Configuration automagic loading
-------------------------------

No "automagic" configuration loading should be done for anymodule. The role of the conf_auto module is to handle configuration autoloading during post source phase.

Test module
-----------

The test module declares a function taking a module name as parameter: mtest(). This function runs all tests of a module. All frameworks are supported:

- bashunit,
- shunit,
- shunit2.

Module loading
--------------

The module.sh script takes care of managing modules loading, and defines utility functions concerning those loaded modules, ie. module_blacklist_add(), module_blacklist_check(), module_get_path().

It supports several modules repository as well as submodules.

Module repositories
-------------------

A module repository is a directory which contains one or several module directories. It can be specified in the MODULE_PATH environment variable, just the same way the PATH variable is defined: with a list of paths separated by :.

Submodules
----------

A submodule is a module located inside another module that depends on it. There is no submodule nesting level restriction, but the namming standard is *slightly* different, consider the following example table:

=========== =========== =========
Module      Path        Prefix
=========== =========== =========
vcs         /vcs        vcs_
vcs_git     /vcs/git    vcs_git_
vcs_svn     /vcs/svn    vcs_svn_
=========== =========== =========

Versions
````````

0_alpha0: what i and kore cracked wep keys with
0_alpha1: new extension: vcs.sh

0.1_alpha0: new extension: vps.sh all functions and variablesprefixed with vps_
          wifi.sh: bugfix, added reload function, stable.
          vcs.sh: regenerate $tag on load, stable.
0.1_alpha1: vps.sh: tested/fixed vps stuff except ssh
0.1_alpha2: vps.sh: vps_ssh works
0.1_alpha3: vps.sh: portage shortcuts
0.1_beta0:  vps.sh: everything seems to work, freezing vps_ api
0.2_alpha0: bootstrap script
0.2_alpha1: configuration module (part that was decoupled) with a simple demonstration break module
0.2_alpha2: os management module basics
0.2_alpha3: simple demonstration volume control module
0.2_alpha4: simple demonstration music module
0.2_alpha5: convenient interactive module configuration UI: conf_module()
0.3_alpha0: major refactor
0.4_alpha0: "remove 50% of code" refactor
0.4_alpha1: Test break
0.4_beta0:  Finnaly sorted the general architecture.
0.4_beta1:  Conf_auto module.

Credit
``````

#bash@irc.freenode.net: very very nice and knowledgeable users...

All Open Source hackers. Thanks a bunch for your involvement!

Author
``````

James Pic <jamespic@gmail.com>
